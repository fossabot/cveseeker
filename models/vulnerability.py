from typing import List
from terminal.colors import RED, GREEN, YELLOW, BLACK_ON_WHITE, RESET

class Vulnerability:
    def __init__(
        self, 
        id: str,
        source: str,
        url: str,
        reference_urls: List[str],
        base_score: str,
        base_severity: str,
        title: str,
        description: str,
        vulnerable_components: List[str],
        tags: List[str],
        date: str
    ):
        self.id = id
        self.source = source
        self.title = title
        self.description = description
        self.reference_urls = reference_urls
        self.url = url
        self.base_score = base_score
        self.base_severity = base_severity
        self.vulnerable_components = vulnerable_components
        self.date = date
        self.tags = tags

    def _colorize_base_score(self):
        try:
            score = float(self.base_score)
            match score:
                case _ if 8 <= score <= 9:
                    return f"{RED}{self.base_score}{RESET}"
                case _ if score > 9:
                    return f"{BLACK_ON_WHITE}{self.base_score}{RESET}"
                case _:
                    return self.base_score
        except (ValueError, TypeError):
            return self.base_score

    def _colorize_severity(self):
        severity = self.base_severity.lower()
        match severity:
            case "low":
                return f"{GREEN}{self.base_severity}{RESET}"
            case "moderate" | "medium":
                return f"{YELLOW}{self.base_severity}{RESET}"
            case "high":
                return f"{RED}{self.base_severity}{RESET}"
            case "critical":
                return f"{BLACK_ON_WHITE}{self.base_severity}{RESET}"
            case _:
                return f"{self.base_severity}"

    def __str__(self):
        result = ""
        if self.id:
            result += f"{GREEN}ID{RESET}: {self.id}\n"
        
        if self.date:
            result += f"{GREEN}Date{RESET}: {self.date}\n"
            
        if self.source:
            result += f"{GREEN}Source{RESET}: {self.source.__class__.__name__}\n"
            
        if self.url:
            result += f"{GREEN}URL{RESET}: {self.url}\n"

        if self.title:
            result += f"{GREEN}Title{RESET}: {self.title}\n"
            
        if self.description:
            result += f"{GREEN}Description{RESET}: {self.description.rstrip()}\n"
            
        if len(self.reference_urls):
            result += f"{GREEN}Reference URLs{RESET}:\n{''.join(map(lambda X: f'{str(X)}\n', self.reference_urls))}"
        
        if self.base_score:
            result += f"{GREEN}Base Score{RESET}: {self._colorize_base_score()}\n"
            
        if self.base_severity:
            result += f"{GREEN}Base Severity{RESET}: {self._colorize_severity()}\n"
            
        if len(self.vulnerable_components):
            result +=  f"{GREEN}Vulnerable Components{RESET}:\n{''.join(map(lambda X: f'{str(X)}\n', self.vulnerable_components))}"
            
        if len(self.tags):
            result += f"{GREEN}Tags{RESET}: {', '.join(map(lambda X: f'{str(X)}', self.tags))} \n"
                
        return result
        
