from typing import List
from concurrent.futures import ThreadPoolExecutor, as_completed
from models.vulnerability_intelligence import VulnerabilityIntelligence
from services.vulnerability_intelligence.enrichment.enrichment import vulners_find_related_cve_data
from dateutil import parser as dateutil_parser

class VulnerabilityIntelligenceEnrichment:
    def __init__(self, vulnerability_intelligence_list: List[VulnerabilityIntelligence]):
        self.vulnerability_intelligence_list = vulnerability_intelligence_list

    def enrich(self) -> List[VulnerabilityIntelligence]:
        with ThreadPoolExecutor(max_workers=20) as executor:
            future_to_vuln = {
                executor.submit(self._fetch_and_enrich, vuln_intelligence): vuln_intelligence
                for vuln_intelligence in self.vulnerability_intelligence_list
                if vuln_intelligence.id.startswith("CVE-")
            }
            
            for future in as_completed(future_to_vuln):
                vuln_intelligence = future_to_vuln[future]
                try:
                    enrichment_data = future.result()
                    if enrichment_data:
                        self._apply_enrichment(vuln_intelligence, enrichment_data)
                except Exception as e:
                    print(f"[!] Error enriching data for {vuln_intelligence.id}: {e}")

        return self.vulnerability_intelligence_list

    def _fetch_and_enrich(self, vuln_intelligence: VulnerabilityIntelligence) -> dict:
        return vulners_find_related_cve_data(vuln_intelligence.id)

    def _apply_enrichment(self, vuln_intelligence: VulnerabilityIntelligence, enrichment_data: dict):
        related_urls = enrichment_data.get('related_urls', [])
        
        vuln_intelligence.reference_urls.update(related_urls)

        publish_date = enrichment_data.get('publish_date')
        date = "N/A"
        
        if publish_date:
            try:
                parsed_date = dateutil_parser.parse(publish_date)
                date = parsed_date.strftime("%Y-%m-%d")
            except Exception as e:
                print(f"[!] Error parsing date for {vuln_intelligence.id}: {e}")

        cvss_score = enrichment_data.get('cvss_score')
        if cvss_score:
            vuln_intelligence.base_scores.append({
                "source": self,
                "score": cvss_score,
                "date": date
            })
        
        severity = enrichment_data.get('base_severity')
        if severity:
            vuln_intelligence.severities.append({
                "source": self,
                "severity": severity,
                "date": date
            })
        
        tags = enrichment_data.get('tags', [])
        vuln_intelligence.tags.update(tags)
        
        description = enrichment_data.get('description')
        if description:
            if not any(desc["text"] == description for desc in vuln_intelligence.descriptions):
                vuln_intelligence.descriptions.append({
                    "source": self,
                    "text": description[:1024].replace("\n", " "),
                    "date": date
                })

