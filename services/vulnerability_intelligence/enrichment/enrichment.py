from typing import Dict
import httpx
import requests


def vulners_find_related_cve_data(cve: str) -> Dict:
    data = {
        'related_urls': [],
        'cvss_score': None,
        'base_severity': None,
        'tags': [],
        'description': None,
        'publish_date': None
    }
    try:
        response = httpx.get(f"https://vulners.com/api/v3/search/lucene/", params={'query': f'{cve}', 'size': 10})
        if response.status_code == 200:
            response_data = response.json()
            if response_data.get('result') == 'OK':
                search_results = response_data.get('data', {}).get('search', [])
                for item in search_results:
                    source = item.get('_source', {})

                    href = source.get('href', '')
                    vhref = source.get('vhref', '')
                    if href:
                        data['related_urls'].append(href)
                    if vhref:
                        data['related_urls'].append(vhref)

                    if not data['cvss_score'] and 'cvss' in source:
                        cvss_data = source['cvss']
                        data['cvss_score'] = str(cvss_data.get('score'))
                        data['base_severity'] = cvss_data.get('severity')

                    tags = source.get('tags', [])
                    if tags:
                        data['tags'].extend(tags)

                    if not data['description']:
                        data['description'] = source.get('description')

                    if not data['publish_date']:
                        data['publish_date'] = source.get('published')

    except Exception as e:
        print(f"Error fetching related data for CVE {cve}: {e}")
        
    return data


def github_fetch_cve_data(cve: str) -> Dict:
    year = cve.split('-')[1]
    url = f"https://raw.githubusercontent.com/trickest/cve/refs/heads/main/{year}/{cve}.md"
    
    data = {
        'related_urls': [],
        'description': None,
        'product': None,
        'version': None,
        'cwe': None,
        'pocs': [],
        'mitigation': None,
        'tags': []
    }
    
    try:
        response = requests.get(url)
        if response.status_code == 200:
            content = response.text
            lines = content.splitlines()
            
            description = []
            in_description = False
            
            for line in lines:
                if line.startswith('- https://github.com/'):
                    data['related_urls'].append(line.strip("- "))
                
                elif line.startswith('### Description'):
                    in_description = True
                
                elif in_description:
                    if line.startswith('###') and not line.startswith('### Description'):
                        in_description = False
                    else:
                        description.append(line.strip())
                
                elif line.startswith('![](https://img.shields.io/static/v1?label=Product'):
                    product_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                    data['product'] = product_info.strip()
                
                elif line.startswith('![](https://img.shields.io/static/v1?label=Version'):
                    version_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                    data['version'] = version_info.strip()
                
                elif 'label=Vulnerability' in line and 'CWE-' in line:
                    cwe_info = line.split('message=')[-1].split('&')[0].replace('%20', ' ')
                    data['cwe'] = cwe_info.strip()
                
                elif line.lower().startswith('#### github'):
                    pocs = []
                    poc_index = lines.index(line) + 1
                    while poc_index < len(lines) and lines[poc_index].startswith('- '):
                        poc_link = lines[poc_index].split('- ')[1].strip()
                        pocs.append(poc_link)
                        poc_index += 1
                    data['pocs'].extend(pocs)
                
                elif 'mitigates this vulnerability' in line.lower():
                    mitigation_index = lines.index(line)
                    mitigation_info = []
                    while mitigation_index < len(lines) and not lines[mitigation_index].startswith('###'):
                        mitigation_info.append(lines[mitigation_index].strip())
                        mitigation_index += 1
                    data['mitigation'] = ' '.join(mitigation_info)
            
            data['description'] = ' '.join(description) if description else None

    except Exception as e:
        print(f"Error fetching data for CVE {cve}: {e}")

    return data
